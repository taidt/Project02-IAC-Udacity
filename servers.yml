Description: tutai92 - Project 02 - Deploy a high availability web app using CloudFormation - networking resources

Parameters:
  ProjectName:
    Type: String
    Description: Project name used for tagging resources

  InstanceType:
    Type: String
    Description: EC2 instance type. For the second project requirements is t2.micro.
    AllowedValues:
      - t2.micro
      - t3.small
      - t3.medium

Resources:
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer Security Group
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ALB-SecurityGroup"

  ApplicationWebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Web App Security Group
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-SecurityGroup"

  ApplicationAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${ProjectName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${ProjectName}-PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ApplicationLaunchTemplate
        Version: !GetAtt ApplicationLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ApplicationLoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Application-WebAppAutoScalingGroup"
          PropagateAtLaunch: true

  # ApplicationLaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: ami-0fc5d935ebf8bc3bc
  #     InstanceType: !Ref InstanceType
  #     IamInstanceProfile:
  #       Fn::ImportValue: !Sub "${ProjectName}-App-Instance-Profile"
  #     SecurityGroups:
  #       - !Ref ApplicationWebAppSecurityGroup
  #     BlockDeviceMappings:
  #       - DeviceName: "/dev/sdk"
  #         Ebs:
  #           VolumeSize: 10
  #           DeleteOnTermination: true
  #           VolumeType: gp2
  #     UserData:
  #       Fn::Base64: !Sub |
  #           #!/bin/bash
  #           sudo apt update
  #           sudo apt install unzip apache2 -y
            
  #           aws s3 cp s3://tutai92-s3-bucket/tutai92.zip /tmp/
  #           unzip -o /tmp/tutai92.zip -d /var/www/html/

  #           sudo chown -R www-data:www-data /var/www/html/
            
  #           sudo systemctl restart apache2.service

  ApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-app-launch-template" 
      LaunchTemplateData:
        ImageId: ami-0fc5d935ebf8bc3bc
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
                -   DeviceName: "/dev/sdk"
                    Ebs:
                        VolumeSize: 10
                        DeleteOnTermination: true
                        VolumeType: gp2
        SecurityGroupIds:
          - !Ref ApplicationWebAppSecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo apt update
            sudo apt install unzip apache2 -y
            
            aws s3 cp s3://tutai92-s3-bucket/tutai92.zip /tmp/
            unzip -o /tmp/tutai92.zip -d /var/www/htm
            sudo chown -R www-data:www-data /var/www/html/
            
            sudo systemctl restart apache2.service
            cd /var/www/html
            echo "it works! Udagram, Udacity" > index.html

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-ALB-TG"
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-VPC
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-ALB"
      Subnets:
        - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Application-LoadBalancer"

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

  AutoScalingGroupScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1

  AutoScalingGroupScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1


  AutoScalingGroupScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 2 minutes
      AlarmActions:
        - !Ref AutoScalingGroupScaleUpPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ApplicationAutoScalingGroup

  AutoScalingGroupScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 20% for 2 minutes
      AlarmActions:
        - !Ref AutoScalingGroupScaleDownPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ApplicationAutoScalingGroup

Outputs:
  # Add your outputs here
  ApplicationLoadBalancerDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-Application-LoadBalancer-DNSName